

--ALTER TABLE Сотрудник 
--	DROP FK1Сотрудник 

ALTER TABLE EMPLOYEE 
	DROP CONSTRAINT FK1EMPLOYEE 

GO	

ALTER TABLE REFRESHERING 
	DROP CONSTRAINT FK1REFRESHERING 
 
GO

ALTER TABLE REFRESHERING 
	DROP CONSTRAINT FK2REFRESHERING 
	
GO

ALTER TABLE PROFESSION 
	DROP CONSTRAINT FK1PROFESSION 
		
GO


ALTER TABLE PROFESSION_SKILL 
	DROP CONSTRAINT FK1PROFESSION_SKILL 
		
GO


ALTER TABLE PROFESSION_SKILL 
	DROP CONSTRAINT FK2PROFESSION_SKILL 
		
GO


ALTER TABLE VACANCY 
	DROP CONSTRAINT FK1VACANCY 
			
GO

	
ALTER TABLE VACANCY 
	DROP CONSTRAINT FK2VACANCY 
	
GO


ALTER TABLE HISTORY 
	DROP CONSTRAINT FK1HISTORY 
				
GO


ALTER TABLE HISTORY 
	DROP CONSTRAINT FK2HISTORY
		
GO


ALTER TABLE HISTORY 
	DROP CONSTRAINT FK3HISTORY 
				
GO

DROP VIEW  V_EMPLOYEE
DROP VIEW  V_PROFESSION
DROP VIEW  V_PROFESSION_SKILL
DROP VIEW  V_VACANCY
DROP VIEW  	V_HISTORY 
go


DROP PROCEDURE PDELETE_FROM_EMPLOYEE
DROP PROCEDURE PDELETE_FROM_V_PROFESSION

DROP PROCEDURE P_DELETE_V_PROFESSION_SKILL
DROP PROCEDURE P_UPDATE_V_ROFESSION_SKILL
DROP PROCEDURE P_INSERT_V_ROFESSION_SKILL

DROP PROCEDURE P_DELETE_V_VACANCY
DROP PROCEDURE P_UPDATE_STATUS_V_VACANCY

DROP PROCEDURE P_DELETE_V_HISTORY
DROP PROCEDURE P_UPDATE_STATUS_V_HISTORY
GO


DROP TABLE HISTORY  
DROP TABLE VACANCY
DROP TABLE ORGANIZATION  /* справочник */ 
DROP TABLE PROFESSION_SKILL
DROP TABLE PROFESSION
DROP TABLE SHERE_PROFESSION	/*справочник*/
DROP TABLE REFRESHERING
DROP TABLE REFRESHER_COURSE		/*справочник*/
DROP TABLE APPLICANT			/*справочник*/
DROP TABLE EMPLOYEE			
DROP TABLE SPECIALITY			/*справочник*/



CREATE TABLE SPECIALITY(
	ID INT PRIMARY KEY IDENTITY, 
	NAME VARCHAR(255) NOT NULL, 
	SYSTEM_SHEMA VARCHAR(255) NOT NULL
)
	
GO





CREATE TABLE EMPLOYEE(
	ID INT PRIMARY KEY IDENTITY, 
	ID_SPECIALITY INT NOT NULL,
	FIRST_NAME VARCHAR(100) NOT NULL,
	SECOND_NAME VARCHAR(100) NOT NULL,
	FATHER_NAME VARCHAR(100) NOT NULL,
	BIRTHDAY DATETIME NOT NULL
)
	
GO



ALTER TABLE EMPLOYEE 
	ADD CONSTRAINT FK1EMPLOYEE FOREIGN KEY (ID_SPECIALITY) 
        	REFERENCES SPECIALITY( ID )
 
	
GO

CREATE VIEW V_EMPLOYEE
AS
	SELECT ISNULL(E.ID,-999)  AS ID,
		E.ID_SPECIALITY AS ID_SPECIALITY,
		E.FIRST_NAME AS FIRST_NAME,
		E.SECOND_NAME AS SECOND_NAME,
		E.FATHER_NAME AS FATHER_NAME,
		E.BIRTHDAY AS BIRTHDAY,
		S.NAME AS NAME_SPECIALITY
	FROM
		EMPLOYEE AS E JOIN SPECIALITY AS S ON E.ID_SPECIALITY = S.ID

GO
CREATE TRIGGER TIDV_EMPLOYEE on V_EMPLOYEE
INSTEAD OF DELETE
as
begin
	DELETE FROM EMPLOYEE WHERE ID IN (SELECT ID FROM DELETED)
end
go

--ДЛЯ ENTITY
CREATE PROCEDURE PDELETE_FROM_EMPLOYEE ( @ID INT)
AS

BEGIN
	DELETE FROM V_EMPLOYEE WHERE ID = @ID
END
GO

CREATE TABLE APPLICANT(
	ID INT PRIMARY KEY IDENTITY, 
	FIRST_NAME VARCHAR(100) NOT NULL,
	SECOND_NAME VARCHAR(100) NOT NULL,
	FATHER_NAME VARCHAR(100) NOT NULL,
	
	LAST_WORK_SPACE VARCHAR(255),
	EDUCATION VARCHAR(100) NOT NULL,
	BIRTHDAY DATETIME NOT NULL, 
	FAMILY VARCHAR(255) NOT NULL, 
	SOCIAL_STATUS VARCHAR(255) NOT NULL
)

	
GO


CREATE TABLE REFRESHER_COURSE	(
	ID INT PRIMARY KEY IDENTITY, 
	NAME VARCHAR(255) NOT NULL,
	DURATION INT NOT NULL 
)

	
GO


CREATE TABLE REFRESHERING	(
	ID INT PRIMARY KEY IDENTITY, 
	ID_REFRESHER_COURSE INT NOT NULL, 
	ID_APPLICANT INT NOT NULL,
	START_DATE DATETIME NOT NULL,  
	END_DATE DATETIME NOT NULL
)
	
GO


ALTER TABLE REFRESHERING 
	ADD CONSTRAINT FK1REFRESHERING FOREIGN KEY (ID_REFRESHER_COURSE) 
        	REFERENCES REFRESHER_COURSE( ID )
 	
GO


ALTER TABLE REFRESHERING 
	ADD CONSTRAINT FK2REFRESHERING FOREIGN KEY (ID_APPLICANT) 
        	REFERENCES APPLICANT( ID )
	
GO

			

/*
	Сфера. Общая сфера профессии, название 
*/
CREATE TABLE SHERE_PROFESSION(
	ID INT PRIMARY KEY IDENTITY, 
	NAME VARCHAR(255) NOT NULL 
)
	
GO


/*
	Профессия, названеи и сфера ее деятельности -------------------------------------------------------------------------------------------------------
*/
CREATE TABLE PROFESSION(
	ID INT PRIMARY KEY IDENTITY, 
	NAME VARCHAR(50) NOT NULL,
	ID_SHERE_PROFESSION INT NOT NULL
)
	
GO





ALTER TABLE PROFESSION 
	ADD CONSTRAINT FK1PROFESSION FOREIGN KEY (ID_SHERE_PROFESSION) 
        	REFERENCES SHERE_PROFESSION( ID )
	
GO


CREATE VIEW V_PROFESSION
AS
	SELECT 
		P.ID AS ID,
		P.NAME AS NAME,
		P.ID_SHERE_PROFESSION AS ID_SHERE_PROFESSION,
		SP.NAME AS NAME_SHERE_PROFESSION
	FROM 
		PROFESSION AS P JOIN SHERE_PROFESSION AS SP ON P.ID_SHERE_PROFESSION = SP.ID

GO

CREATE TRIGGER TIDV_PROFESSION on V_PROFESSION
INSTEAD OF DELETE
as
begin
	DELETE FROM PROFESSION WHERE ID IN (SELECT ID FROM DELETED)
end
go

--ДЛЯ ENTITY
CREATE PROCEDURE PDELETE_FROM_V_PROFESSION ( @ID INT)
AS
BEGIN
	DELETE FROM V_PROFESSION WHERE ID = @ID
END
GO


/*
	Владение Профессией, просии которыми владеет определенный соискатель -----------------------------------------------------------------------
*/
CREATE TABLE PROFESSION_SKILL(
	ID INT PRIMARY KEY IDENTITY, 
	ID_APPLICANT INT NOT NULL,
	ID_PROFESSION INT NOT NULL
)
	
GO


ALTER TABLE PROFESSION_SKILL 
	ADD CONSTRAINT FK1PROFESSION_SKILL FOREIGN KEY (ID_APPLICANT) 
        	REFERENCES APPLICANT( ID )
	
GO


ALTER TABLE PROFESSION_SKILL 
	ADD CONSTRAINT FK2PROFESSION_SKILL FOREIGN KEY (ID_PROFESSION) 
        	REFERENCES PROFESSION( ID )
			
GO


CREATE VIEW V_PROFESSION_SKILL
AS
	SELECT ISNULL(PS.ID,-3) AS ID,
		PS.ID_APPLICANT AS ID_APPLICANT,
		PS.ID_PROFESSION AS ID_PROFESSION,
		P.NAME AS NAME_PROFESSION
	FROM 
		PROFESSION_SKILL AS PS JOIN PROFESSION AS P ON PS.ID_PROFESSION = P.ID
	
GO



CREATE TRIGGER TII_V_PROFESSION_SKILL on V_PROFESSION_SKILL
INSTEAD OF INSERT
as
begin
	CREATE TABLE #VREM(
		ID INT,
		ID_APPLICANT INT,
		ID_PROFESSION INT
	)
	INSERT INTO #VREM 
		SELECT I.ID AS ID , A.ID AS ID_APPLICANT, P.ID AS ID_PROFESSION
			FROM 
				INSERTED I 
				LEFT JOIN PROFESSION P  ON  P.ID = I.ID_PROFESSION 
				LEFT JOIN APPLICANT A  ON  A.ID = I.ID_APPLICANT 
				
	INSERT INTO PROFESSION_SKILL(ID_APPLICANT,ID_PROFESSION) 
		SELECT ID_APPLICANT,ID_PROFESSION 
			FROM #VREM
end
go

CREATE TRIGGER TIU_V_PROFESSION_SKILL on V_PROFESSION_SKILL
INSTEAD OF UPDATE
as
begin
	CREATE TABLE #VREM(
		ID INT,
		ID_APPLICANT INT,
		ID_PROFESSION INT
	)
	INSERT INTO #VREM 
		SELECT I.ID AS ID , A.ID AS ID_APPLICANT, P.ID AS ID_PROFESSION
			FROM 
				INSERTED I 
				LEFT JOIN PROFESSION P  ON  P.ID = I.ID_PROFESSION 
				LEFT JOIN APPLICANT A  ON  A.ID = I.ID_APPLICANT 
				
	UPDATE PROFESSION_SKILL SET PS.ID_APPLICANT = VR.ID_APPLICANT, PS.ID_PROFESSION=VR.ID_PROFESSION
		FROM  #VREM AS VR,
			PROFESSION_SKILL PS
		WHERE PS.ID = VR.ID
end
go

CREATE TRIGGER TID_V_PROFESSION_SKILL on V_PROFESSION_SKILL
INSTEAD OF DELETE
as
begin
		DELETE FROM PROFESSION_SKILL WHERE ID IN (SELECT ID FROM DELETED)
end
go

--ДЛЯ ENTITY


CREATE PROCEDURE P_DELETE_V_PROFESSION_SKILL ( @ID INT)
AS
BEGIN
	DELETE FROM V_PROFESSION_SKILL WHERE ID = @ID
END
GO

CREATE PROCEDURE P_UPDATE_V_ROFESSION_SKILL ( @ID INT, @ID_APPLICANT INT, @ID_PROFESSION INT)
AS
BEGIN
	UPDATE  V_PROFESSION_SKILL SET ID_APPLICANT = @ID_APPLICANT, ID_PROFESSION = @ID_PROFESSION
		WHERE ID = @ID
END
GO

CREATE PROCEDURE P_INSERT_V_ROFESSION_SKILL (  @ID_APPLICANT INT, @ID_PROFESSION INT)
AS
BEGIN
	INSERT INTO  V_PROFESSION_SKILL (ID_APPLICANT, ID_PROFESSION) VALUES(@ID_APPLICANT, @ID_PROFESSION)
END
GO

/*
	Организация, информация о организациях предоставляющие вакансии ----------------------------------------------------------------------------
*/
CREATE TABLE ORGANIZATION(
	ID INT PRIMARY KEY IDENTITY, 
	NAME VARCHAR(255) NOT NULL,
	ABOUT VARCHAR(255)
)
	
GO


/*
	Сведения о предоставленйо вакансии--------------------------------------------------------------------------------------------------------------------------------
*/
CREATE TABLE VACANCY(
	ID INT PRIMARY KEY IDENTITY, 
	ID_ORGANIZATION INT NOT NULL,
	ID_PROFESSION INT NOT NULL,
	ABOUT VARCHAR(255) NOT NULL,
	STATUS int NOT NULL DEFAULT 1, /*true - актуальна/false-неактульна*/
	MIN_EXPERIENCE INT NOT NULL ,
	MAX_EXPERIENCE INT NOT NULL ,
	DATE_ADD DateTIME NOT NULL
)
	
GO



ALTER TABLE VACANCY 
	ADD CONSTRAINT FK1VACANCY FOREIGN KEY (ID_PROFESSION) 
        	REFERENCES PROFESSION( ID )
		
GO

		
ALTER TABLE VACANCY 
	ADD CONSTRAINT FK2VACANCY FOREIGN KEY (ID_ORGANIZATION) 
        	REFERENCES ORGANIZATION( ID )	
GO

CREATE VIEW V_VACANCY
AS
	SELECT 
		ISNULL(V.ID,-3) AS ID,
		V.ID_ORGANIZATION AS ID_ORGANIZATION,
		V.ID_PROFESSION AS ID_PROFESSION,
		V.ABOUT AS ABOUT,
		V.STATUS AS STATUS,
		V.MIN_EXPERIENCE AS MIN_EXPERIENCE,
		V.MAX_EXPERIENCE AS MAX_EXPERIENCE,
		DATE_ADD AS DATE_ADD,
		O.NAME AS NAME_ORGANIZATION,
		P.NAME AS NAME_PROFESSION
	FROM 
		VACANCY V 
		JOIN ORGANIZATION O ON V.ID_ORGANIZATION = O.ID
		JOIN PROFESSION P ON V.ID_PROFESSION = P.ID
		  
GO


CREATE TRIGGER TII_V_VACANCY on V_VACANCY
INSTEAD OF INSERT
as
begin
	CREATE TABLE #VREM(
		ID INT ,
		ID_ORGANIZATION INT,
		ID_PROFESSION INT ,
		ABOUT VARCHAR(255),
		STATUS int ,
		MIN_EXPERIENCE INT ,
		MAX_EXPERIENCE INT ,
		DATE_ADD DateTIME 
	)
	INSERT INTO #VREM 
		SELECT I.ID AS ID , O.ID AS ID_ORGANIZATION, P.ID AS ID_PROFESSION,
			I.ABOUT AS ABOUT, I.STATUS AS STATUS, I.MIN_EXPERIENCE AS MIN_EXPERIENCE,
			I.MAX_EXPERIENCE AS MAX_EXPERIENCE, I.MAX_EXPERIENCE AS  MAX_EXPERIENCE,
			SYSDATETIME() AS DATE_ADD
			FROM 
				INSERTED I 
				LEFT JOIN PROFESSION P  ON  P.ID = I.ID_PROFESSION 
				LEFT JOIN ORGANIZATION O  ON  O.ID = I.ID_ORGANIZATION 
				
	INSERT INTO VACANCY(ID_ORGANIZATION, ID_PROFESSION,ABOUT, STATUS, MIN_EXPERIENCE, MAX_EXPERIENCE,DATE_ADD ) 
		SELECT ID_ORGANIZATION, ID_PROFESSION,ABOUT, STATUS, MIN_EXPERIENCE, MAX_EXPERIENCE,DATE_ADD
			FROM #VREM
end
go

CREATE TRIGGER TIU_V_VACANCY on V_VACANCY
INSTEAD OF UPDATE
as
begin
		CREATE TABLE #VREM(
		ID INT ,
		ID_ORGANIZATION INT,
		ID_PROFESSION INT ,
		ABOUT VARCHAR(255),
		STATUS int ,
		MIN_EXPERIENCE INT ,
		MAX_EXPERIENCE INT ,
		DATE_ADD DateTIME 
	)
	INSERT INTO #VREM 
		SELECT I.ID AS ID , O.ID AS ID_ORGANIZATION, P.ID AS ID_PROFESSION,
			I.ABOUT AS ABOUT, 0 AS STATUS, I.MIN_EXPERIENCE AS MIN_EXPERIENCE,
			I.MAX_EXPERIENCE AS MAX_EXPERIENCE, I.MAX_EXPERIENCE AS  MAX_EXPERIENCE,
			I.DATE_ADD AS DATE_ADD
			FROM 
				INSERTED I 
				LEFT JOIN PROFESSION P  ON  P.ID = I.ID_PROFESSION 
				LEFT JOIN ORGANIZATION O  ON  O.ID = I.ID_ORGANIZATION 
				
	INSERT INTO VACANCY(ID_ORGANIZATION, ID_PROFESSION,ABOUT, STATUS, MIN_EXPERIENCE, MAX_EXPERIENCE,DATE_ADD ) 
		SELECT ID_ORGANIZATION, ID_PROFESSION,ABOUT, STATUS, MIN_EXPERIENCE, MAX_EXPERIENCE,DATE_ADD
			FROM #VREM

				
	UPDATE VACANCY SET 
		V.ID_ORGANIZATION = VR.ID_ORGANIZATION, V.ID_PROFESSION = VR.ID_PROFESSION,
		V.ABOUT = VR.ABOUT, V.STATUS = VR.STATUS, V.MIN_EXPERIENCE = VR.MIN_EXPERIENCE, 
		V.MAX_EXPERIENCE = VR.MAX_EXPERIENCE
		FROM  #VREM AS VR,
			VACANCY V
		WHERE V.ID = VR.ID

end
go

CREATE TRIGGER TID_V_VACANCY on V_VACANCY
INSTEAD OF DELETE
as
begin
		DELETE FROM VACANCY WHERE ID IN (SELECT ID FROM DELETED)
end
go

--ДЛЯ ENTITY


CREATE PROCEDURE P_DELETE_V_VACANCY ( @ID INT)
AS
BEGIN
	DELETE FROM V_VACANCY WHERE ID = @ID
END
GO

CREATE PROCEDURE P_UPDATE_STATUS_V_VACANCY ( @ID INT, @STATUS INT)
AS
BEGIN
	UPDATE  VACANCY SET STATUS = @STATUS
		WHERE ID = @ID
END
GO



/*
	История, Сведенья о предложеных тех или иных вакансиях соискателям -----------------------------------------------------------------------------------------------
*/
CREATE TABLE HISTORY(
	ID INT PRIMARY KEY IDENTITY, 
	ID_EMPLOYEE INT NOT NULL,
	ID_VACANCY INT NOT NULL,
	ID_APPLICANT INT NOT NULL,
	STATUS INT  NOT NULL DEFAULT 0, /* 0 - расматривается, 1 принял РАБОТОДАТЕЛЬ, -1 не принял РАБОТОДАТЕЛЬ*/
	DATE_ADD DateTIME NOT NULL
)
	
GO


ALTER TABLE HISTORY 
	ADD CONSTRAINT FK1HISTORY FOREIGN KEY (ID_EMPLOYEE) 
        	REFERENCES EMPLOYEE( ID )
				
GO


ALTER TABLE HISTORY 
	ADD CONSTRAINT FK2HISTORY FOREIGN KEY (ID_VACANCY) 
        	REFERENCES VACANCY( ID )
				
GO


ALTER TABLE HISTORY 
	ADD CONSTRAINT FK3HISTORY FOREIGN KEY (ID_APPLICANT) 
        	REFERENCES APPLICANT( ID )
				
GO

CREATE VIEW V_HISTORY
AS 
	SELECT 
		ISNULL(H.ID,-3) AS ID,
		H.ID_EMPLOYEE AS ID_EMPLOYEE,
		H.ID_VACANCY AS ID_VACANCY,
		H.ID_APPLICANT AS ID_APPLICAN,
		H.STATUS AS STATUS,
		H.DATE_ADD AS DATE_ADD,
		A.FIRST_NAME AS APPLICANT_FIRST_NAME,
		A.SECOND_NAME AS APPLICANT_SECOND_NAME,
		V.ABOUT AS ABOUT,
		V.NAME_ORGANIZATION AS NAME_ORGANIZATION,
		V.NAME_PROFESSION AS NAME_PROFESSION,
		E.FIRST_NAME AS EMPLOYEE_FIRST_NAME,
		E.SECOND_NAME AS EMPLOYEE_SECOND_NAME
	FROM 
		HISTORY AS H
		JOIN APPLICANT AS A ON A.ID= H.ID_APPLICANT
		JOIN V_VACANCY AS V ON V.ID=H.ID_VACANCY
		JOIN EMPLOYEE AS E ON E.ID = H.ID_EMPLOYEE

GO

CREATE TRIGGER TID_V_HISTORY on V_HISTORY
INSTEAD OF DELETE
as
begin
		DELETE FROM HISTORY WHERE ID IN (SELECT ID FROM DELETED)
end
go

--ДЛЯ ENTITY
CREATE PROCEDURE P_DELETE_V_HISTORY ( @ID INT)
AS
BEGIN
	DELETE FROM V_HISTORE WHERE ID = @ID
END
GO


CREATE PROCEDURE P_UPDATE_STATUS_V_HISTORY ( @ID INT, @STATUS INT)
AS
BEGIN
	UPDATE  VACANCY SET STATUS = @STATUS
		WHERE ID = @ID
END
GO                                                                                   

